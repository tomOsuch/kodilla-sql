CREATE TABLE BOOKS_AUD (
    EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
    EVENT_DATE DATETIME NOT NULL,
    EVENT_TYPE VARCHAR(10) DEFAULT NULL,
    BOOK_ID INT(11) NOT NULL,
    OLD_BOOK_ID INT(11),
    NEW_BOOK_ID INT(11),
    OLD_BOOK_TITLE VARCHAR(255),
    NEW_BOOK_TITLE VARCHAR(255),
    OLD_BOOK_PUBYEAR INT(4),
    NEW_BOOK_PUBYEAR INT(4),
    OLD_BOOK_BESTSELLER BOOLEAN,
    NEW_BOOK_BESTSELLER BOOLEAN,
    PRIMARY KEY (`EVENT_ID`)
    );

COMMIT;

DELIMITER $$

CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID,
                  NEW_BOOK_TITLE, NEW_BOOK_PUBYEAR, NEW_BOOK_BESTSELLER)
    VALUES (CURTIME(), "INSERT", NEW.BOOK_ID,
        NEW.TITLE, NEW.PUBYEAR, NEW.BESTSELLER);
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID)
    VALUES (CURTIME(), "DELETE", OLD.BOOK_ID);
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW BOOK_ID,
        NEW_BOOK_TITLE, NEW_BOOK_PUBYEAR, NEW_BOOK_BESTSELLER, OLD_BOOK_ID,
        OLD_BOOK_TITLE, OLD_BOOK_PUBYEAR, OLD_BOOK_BESTSELLER)
    VALUES (CURTIME(), "UPDATE", NEW.BOOK_ID,
            NEW.TITLE, NEW.PUBYEAR, NEW.BESTSELLER,
        OLD.BOOK_ID, OLD.TITLE, OLD.PUBYEAR, OLD.BESTSELLER
        );
END $$

DELIMITER ;

###################################################################################

CREATE TABLE READERS_AUD (
	EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
    EVENT_DATE DATETIME NOT NULL,
    EVENT_TYPE VARCHAR(10) DEFAULT NULL,
    READER_ID INT(11) NOT NULL,
    OLD_READER_FIRSTNAME VARCHAR(255),
    NEW_READER_FIRSTNAME VARCHAR(255),
    OLD_READER_LASTNAME VARCHAR(255),
    NEW_READER_LASTNAME VARCHAR(255),
    OLD_READER_PESELID VARCHAR(11),
    NEW_READER_PESELID VARCHAR(11),
    OLD_READER_VIPLEVEL VARCHAR(20),
    NEW_READER_VIPLEVEL VARCHAR(20),
    PRIMARY KEY (`EVENT_ID`)
    );

    COMMIT;

DELIMITER $$

CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_READER_FIRSTNAME, NEW_READER_LASTNAME, NEW_READER_PESELID, NEW_READER_VIPLEVEL)
    VALUES (CURTIME(), "INSERT", NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL);

END $$
DELIMITER ;

DELIMITER $$

CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID)
            VALUES (CURTIME(), "DELETE", OLD.READER_ID);
END $$

DELIMITER ;

DELETE FROM READERS WHERE READER_ID = 10;

DELIMITER $$

CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_READER_FIRSTNAME,
    NEW_READER_LASTNAME, NEW_READER_PESELID, NEW_READER_VIPLEVEL, OLD_READER_FIRSTNAME,
    OLD_READER_LASTNAME, OLD_READER_PESELID, OLD_READER_VIPLEVEL)
    VALUES (CURTIME(), "UPDATE", OLD.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME,
    NEW.PESELID, NEW.VIP_LEVEL, OLD.FIRSTNAME, OLD.LASTNAME,
    OLD.PESELID, OLD.VIP_LEVEL);
END $$

DELIMITER ;